{"version":3,"sources":["components/XFaceDetector.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["getXFaceDetector","document","querySelector","XFaceDetector","useRef","handleFaceDetection","e","console","log","type","useEffect","current","addEventListener","removeEventListener","style","marginBottom","onClick","startVideo","stopVideo","startPredictions","stopPredictions","ref","linewidth","strokestyle","imgurl","wasmpath","process","App","className","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"qMAUMA,G,WAAmB,kBACvBC,SAASC,cAAc,qBAuCVC,EArCiB,WAC9B,IAAMA,EAAgBC,iBAA6B,MAC7CC,EAAsB,SAACC,GAC3BC,QAAQC,IAAR,UAA0B,qCAAXF,EAAEG,KAA8C,MAAQ,GAAvE,mBAeF,OAZAC,qBAAU,WACR,IAAMC,EAAUR,EAAcQ,QAK9B,OAHAA,EAASC,iBAAiB,gCAAiCP,GAC3DM,EAASC,iBAAiB,mCAAoCP,GAEvD,WACLM,EAASE,oBAAoB,gCAAiCR,GAC9DM,EAASE,oBAAoB,mCAAoCR,MAElE,IAGD,oCACE,yBAAKS,MAAO,CAAEC,aAAc,SAC1B,4BAAQC,QAAS,kBAAMhB,IAAmBiB,eAA1C,eACA,4BAAQD,QAAS,kBAAMhB,IAAmBkB,cAA1C,cACA,4BAAQF,QAAS,kBAAMhB,IAAmBmB,qBAA1C,qBACA,4BAAQH,QAAS,kBAAMhB,IAAmBoB,oBAA1C,qBAEF,qCACEC,IAAKlB,EACLmB,UAAU,IACVC,YAAY,OACZC,OAAO,mDACPC,SAAUC,oD,MC9BHC,MATf,WACE,OACE,yBAAKC,UAAU,OACb,qDACA,kBAAC,EAAD,QCGcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASlC,SAASmC,eAAe,SDqI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,a","file":"static/js/main.40aea1d4.chunk.js","sourcesContent":["import React, { useEffect, useRef } from \"react\";\nimport 'x-face-detector';\n\ninterface XFaceDetectorElement extends HTMLElement {\n  startVideo: Function;\n  stopVideo: Function;\n  startPredictions: Function;\n  stopPredictions: Function;\n}\n\nconst getXFaceDetector = () =>\n  document.querySelector('x-face-detector') as XFaceDetectorElement;\n\nconst XFaceDetector: React.FC = () => {\n  const XFaceDetector = useRef<XFaceDetectorElement>(null);\n  const handleFaceDetection = (e: any) => {\n    console.log(`${e.type === 'x-face-detector-no-face-detected' ? 'NO ' : ''}face detected`);\n  };\n\n  useEffect(() => {\n    const current = XFaceDetector.current\n\n    current!.addEventListener('x-face-detector-face-detected', handleFaceDetection);\n    current!.addEventListener('x-face-detector-no-face-detected', handleFaceDetection);\n\n    return () => {\n      current!.removeEventListener('x-face-detector-face-detected', handleFaceDetection);\n      current!.removeEventListener('x-face-detector-no-face-detected', handleFaceDetection);\n    };\n  }, []);\n\n  return (\n    <>\n      <div style={{ marginBottom: '1rem' }}>\n        <button onClick={() => getXFaceDetector().startVideo()}>start video</button>\n        <button onClick={() => getXFaceDetector().stopVideo()}>stop video</button>\n        <button onClick={() => getXFaceDetector().startPredictions()}>start predictions</button>\n        <button onClick={() => getXFaceDetector().stopPredictions()}>stop predictions</button>\n      </div>\n      <x-face-detector\n        ref={XFaceDetector}\n        linewidth=\"5\"\n        strokestyle=\"blue\"\n        imgurl=\"https://avatars3.githubusercontent.com/u/3065761\"\n        wasmpath={process.env.PUBLIC_URL + '/tfjs-backend-wasm.wasm'}\n      ></x-face-detector>\n    </>\n  );\n}\n\nexport default XFaceDetector;\n","import React from 'react';\nimport XFaceDetector from './components/XFaceDetector';\n\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>react-x-face-detector</h1>\n      <XFaceDetector></XFaceDetector>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}